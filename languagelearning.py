# -*- coding: utf-8 -*-
"""LanguageLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w3RoFLyellCmME36F2WXS_b3gOrTtcZb

**LINGVOLEARN - LANGUAGE LEARNING BOT**
"""

pip install gtts

import random
import csv
import string
from gtts import gTTS
import os
from IPython.display import Audio, display
from google.colab import files

def load_word_data_from_csv(filename):
    word_data = []
    with open(filename, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        for row in csv_reader:
            word_data.append(row)
    return word_data

def word_of_the_day(filename):
    word_data = load_word_data_from_csv(filename)

    print("Welcome to the Word of the Day feature!")
    print("Let's learn a new word today.")
    print()

    while True:
        user_input = input("Press Enter to reveal today's word, or enter 'q' to exit: ")

        if user_input.lower() == 'q':
            print("Thanks for using the Word of the Day feature. See you next time!")
            break

        word_info = random.choice(word_data)

        print(f"Word: {word_info['word']}")
        print(f"Meaning: {word_info['meaning']}")
        print(f"Sentence: {word_info['sentence']}")
        print()

        user_input = input("Would you like to learn another word? (yes/no): ")
        if user_input.lower() != 'yes':
            print("Thanks for using the Word of the Day feature. See you next time!")
            break


def load_dataset(filename):
    try:
        with open(filename, 'r', encoding='ISO-8859-1') as file:
            reader = csv.reader(file)
            dataset = list(reader)
        return dataset
    except Exception as e:
        print(f"An error occurred while loading the dataset: {str(e)}")
        return []

def grammar_dataset():
    dataset = load_dataset('/content/Question,Answer.csv')

    correct_answers = 0
    total_questions = len(dataset)

    print("This is English Grammar Quiz!")
    print("You will be presented with multiple-choice questions.")
    print()

    input("Press Enter to start the quiz...")

    for i, row in enumerate(dataset[1:], start=1):
        question = row[0]
        options = row[1:5]
        answer = int(row[5])

        random.shuffle(options)

        print(f"\nQuestion {i}: {question}")
        for idx, option in enumerate(options, start=1):
            print(f"{idx}. {option}")

        user_answer = input("Your answer (enter the option number, or 'q' to quit): ")

        if user_answer.lower() == 'q':
            print("Quiz aborted.")
            return

        if user_answer.isdigit() and 1 <= int(user_answer) <= len(options):
            user_option_idx = int(user_answer)
            if options[user_option_idx - 1] == options[answer - 1]:
                print("Correct!\n")
                correct_answers += 1
            else:
                print(f"Wrong! The correct answer is Option {answer}: {options[answer - 1]}\n")
        else:
            print("Invalid input. Please enter a valid option number.\n")

    print("Quiz completed!")
    print(f"You answered {correct_answers} out of {total_questions} questions correctly.")

def synonym_antonym_challenge():
    csv_filename = '/content/syn_ant.csv'
    with open(csv_filename, 'r', encoding='latin-1') as csvfile:
        csvreader = csv.reader(csvfile)
        next(csvreader)
        dataset = list(csvreader)
        random.shuffle(dataset)

    correct_count = 0
    word_count = 0
    print("This is Synonym Antonym Learning Challenge Section!")
    print("You will be presented with a word, Try entering correct Synonym and Antonym for the given word")
    print()
    input("Press Enter to start the Challenge...")

    for row in dataset:
        word = row[0]
        synonym = row[1]
        antonym = row[2]

        print(f"Word: {word}")
        print("Enter 'q' to quit.")

        user_synonym = input("Enter synonym for given word: ")
        if user_synonym == 'q':
          print("Challenge aborted.")
          return

        user_antonym = input("Enter antonym for given word: ")
        if user_antonym == 'q':
            break

        synonym_correct = user_synonym.lower() == synonym.lower()
        antonym_correct = user_antonym.lower() == antonym.lower()

        print("\n*** Result ***")

        if synonym_correct and antonym_correct:
            print("Both synonym and antonym are correct!")
            correct_count += 1
        elif synonym_correct or antonym_correct:
            print("One of the responses is correct!")
            if not synonym_correct:
                print(f"The Correct synonym is: {synonym}")
            if not antonym_correct:
                print(f"The Correct antonym is: {antonym}")
        else:
            print("Both synonym and antonym are incorrect.")
            print()
            print(f"The Correct synonym is: {synonym}")
            print(f"The Correct antonym is: {antonym}")

        print("\n")

        word_count += 1

        if word_count == 5:
            print(f"Out of 5, {correct_count} answers are correct.")
            print("\n")
            print("Practice complete.")
            break

def pronunciation_coach():
    uploaded = files.upload()
    text_file_name = list(uploaded.keys())[0]

    with open(text_file_name, "r") as file:
        lines = file.readlines()

    random.shuffle(lines)

    random_dir_name = ''.join(random.choices(string.ascii_lowercase, k=8))
    audio_directory = os.path.join('/content', random_dir_name)
    os.makedirs(audio_directory, exist_ok=True)

    print("This is Pronunciation Coach Section!")
    print()
    print("The audio will be played. You have to prompt what you have heard!")
    print()
    input("Press Enter to start the execution...")

    for i, line in enumerate(lines):
        line = line.strip()
        if line:
            tts = gTTS(line, lang="en")

            audio_file_name = f"output_{i}.mp3"
            audio_file_path = os.path.join(audio_directory, audio_file_name)
            tts.save(audio_file_path)

            display(Audio(audio_file_path, autoplay=True))

            user_response = input("Type what you have heard (or 'q' to quit): ").strip()

            if user_response.lower() == 'q':
                print("Aborted by user.")
                break
            elif user_response:
                if user_response.lower() == line.lower():
                    print("Hurrah....! Right answer!\n")
                else:
                    print(f"Oh, no! Your answer is incorrect. The correct answer is: '{line}'\n")
                    print()

    print("See you soon....!!")

def chatbot(csv_filename):
    print("Hello! I'm your LINGVOLEARN chatbot.")
    print("You can choose from the following options:")
    print()
    print("1. Synonym Antonym Challenge")
    print("2. Pronunciation Coach")
    print("3. English Grammar Quiz")
    print("4. Word of the Day")
    print("5. Exit")

    while True:
        choice = input("Enter the number of your choice (1/2/3/4/5): ")
        print()

        if choice == '1':
            synonym_antonym_challenge()
        elif choice == '2':
            pronunciation_coach()
        elif choice == '3':
            grammar_dataset()
        elif choice == '4':
            word_of_the_day(csv_filename)
        elif choice == '5':
            print("Thank you for using LINGVOLEARN. See you soon!")
            break
        else:
            print("Invalid choice. Please enter a valid option.")

def main():
    csv_filename = '/content/word data.csv'
    print("Welcome to LINGVOLEARN ðŸ™‚!")
    print()
    chatbot(csv_filename)



if __name__ == "__main__":
    main()

